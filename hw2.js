// 1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2    В префиксной форме инкрементирование производится сразу, а возврат — уже с обновленным значением.
d = b++; alert(d);           // 1    В постфиксной форме сначала происходит возвращение значения, а потом выполняется инкрементирование   
c = (2+ ++a); alert(c);      // 5    Выше уже была прибавлена единица в переменную а, и а=2. Здесь прибавили +1 и а = 3 => ответ 5
d = (2+ b++); alert(d);      // 4    В строке 4 была прибавилена единица в переменную b, b = 1. Здесь же прибавляем еще +1 и b = 3, но выводим предыдущее значение т.е. 2, отсюда получаем 4
alert(a);                    // 3   Прибавиляем 1 в примере 1 и примере 3
alert(b);                    // 3   Прибавиляем 1 в примере 2 и примере 4
// Почему код даёт именно такие результаты?




// 2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2); 
// var x= 1 + (2 * 2)
console.log(x);
x = 5;
// 3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
// если a и b положительные, вывести их разность;
// если а и b отрицательные, вывести их произведение;
// если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом. ### 

let a = -2;
let b = 4;

if (a >= 0 && b >= 0) {
    console.log (a-b)
} else if (a < 0 && b < 0){
    console.log(a * b)
} else if (a >=0 && b < 0 || a < 0 && b >= 0){
    console.log(a + b)

// 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15. ### 

let x = 12;
switch (x){
   case 12:
   alert(12);
   case 13:
   alert(13);
   case 14:
   alert(14);
   case 15:
   alert(15);
   break;
}

// 5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return. ### 
let a = 2;
let b = 3;


function plus(a,b){
    return a + b;
}
function minus(a, b) {
    return a - b;
}

function division(a, b) {
    return a / b;
}

function multipcl(a, b) {
    return a + b;
}

// 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное значение (использовать switch). ### 

function mathOperation(arg1, arg2, operation){
    switch(operation){
        case 'plus':
            return arg1 + arg2;
            break;
        case 'minus':
            return arg1 - arg2;
         break;
     case 'division':
                   return arg1 / arg2;
         break;
        case 'mulctipl':
            return arg1 * arg2;
         break;
   }
}
  
// 7) *Сравнить null и 0. Попробуйте объяснить результат. ### 
null > 0; // false. При сравнении null конвертируется в 0 "число" (так как сравниваемые данные должны быть одного типа данных
null == 0; // false. Если 0 - Number, null - Object, вернуть результат сравнения x == ToPrimitive(). Вернуть false. Из алгоритма сравнения для равенст из спецификации «Стандарт ECMA-262, 3я редакция»
null >= 0; // true. Если null < 0 принимает значение false, то null >= 0 принимает значение true.
 
// 8) *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.

function power(val, pow){
    if (pow != 1) { // пока pow != 1, сводить вычисление power(val,pow) к power(val,pow-1)
      return val * power(val, pow - 1);
    } else {
      return val;
    }
  }
  alert( power(2, 3) ); // 8